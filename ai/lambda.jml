const up = 0
const right = 1
const down = 2
const left = 3

const standard = 0
const fright = 1
const invisible = 2

const wall = 0
const empty = 1
const pill = 2
const power = 3
const fruit = 4
const lambda_start = 5
const ghost_start = 6

; A source of pseudo-random numbers

const init_randsrc = [2783,89234,234,892,23487,874,829043,7862,294,2094,29,2095,29083,2098,257,81,89,91,890453,234]

; List functions

fun length xs = if null xs then 0 else 1 + length (tail xs)

fun nth n xs = if n == 0 then head xs else nth (n - 1) (tail xs)

fun last xs = if null (tail xs) then head xs else last (tail xs)

fun map f xs = if null xs then [] else (f (head xs)) :: (map f (tail xs))
fun filter f xs = if null xs then [] else if f (head xs) then (head xs) :: (filter f (tail xs)) else filter f (tail xs)

fun fold f y xs = if null xs then y else fold f (f y (head xs)) (tail xs)
fun fold1 f xs = fold f (head xs) (tail xs)
fun deltafold f xs = if null (tail xs) then [] else (f (head xs) (head (tail xs))) :: (deltafold f (tail xs))

fun all xs = fold (fn a b => a and b) true xs
fun any xs = fold (fn a b => a or b) false xs

fun max a b = if a > b then a else b
fun min a b = if a < b then a else b

fun maximum xs = fold1 max xs
fun minimum xs = fold1 min xs

fun lookup x xs = if x == (fst (head xs)) then snd (head xs) else lookup x (tail xs)
fun member x xs = if null xs then false else if x == (fst (head xs)) then true else member x (tail xs)

fun lookupBy eq x xs = if eq x (fst (head xs)) then snd (head xs) else lookupBy eq x (tail xs)
fun memberBy eq x xs = if null xs then false else if eq x (fst (head xs)) then true else memberBy eq x (tail xs)

fun range n = range2 0 n
fun range2 a b = if a == b then [] else a :: (range2 (a + 1) b)

fun zip xs ys = if null xs then [] else (head xs, head ys) :: (zip (tail xs) (tail ys))

fun enumerate xs = enumerate' 0 xs
fun enumerate' n xs = if null xs then [] else (n, head xs) :: (enumerate' (n + 1) (tail xs))

fun revappend xs ys = if null xs then ys else revappend (tail xs) ((head xs) :: ys)
fun rev xs = revappend xs []

fun append xs ys = if null xs then ys else (head xs) :: (append (tail xs) ys)
fun concat xs = if null xs then [] else append (head xs) (concat (tail xs))

; Arithmetic functions

fun mod a b = a - ((a / b) * b) ; Not sure if this is right (especially with negative numbers)...

; Pseudo-random number functions

fun randbool randsrc = mod (head randsrc) 2 == 0
fun randint randsrc n = mod (head randsrc) n
fun randomchoice randsrc xs = nth (randint randsrc (length xs)) xs

; A queue data struction

fun enqueue x q =
  let (qa, qb) = q in
    (x :: qa, qb)
  end

fun dequeue q =
  let (qa, qb) = q in
    if null qb then dequeue ([], rev qa)
    else (head qb, (qa, tail qb))
  end

fun nullq q =
  let (qa, qb) = q in
    (null qa) and (null qb)
  end

; A generic breadth-first search implementation

fun bfs start getNbrs eq stop =
  let frontier = ([start], []) in
  let visited = [(start, (0, 0))] in
  bfs' frontier visited getNbrs eq stop
  end
  end

fun bfs' frontier visited getNbrs eq stop =
  if nullq frontier then visited
  else
    let (x, frontier) = dequeue frontier in
    let nPrev = lookupBy eq x visited in
      if stop (x, (fst nPrev)) then visited
      else
        let nbrs = filter (fn y => not (memberBy eq y visited)) (getNbrs x) in
        let frontierVisited = fold (fn frontierAndVisited y =>
          let (frontier, visited) = frontierAndVisited in
          let frontier = enqueue y frontier in
          let visited = (y, ((fst nPrev) + 1, x)) :: visited in
            (frontier, visited)
          end
          end
          end) (frontier, visited) nbrs in
          bfs' (fst frontierVisited) (snd frontierVisited) getNbrs eq stop
        end
        end
    end
    end

; Functions for working with directions, locations and mazes

fun mod4 move = if move > 3 then move - 4 else if move < 0 then move + 4 else move

fun opposite move = mod4 (move + 2)
fun turnright move = mod4 (move + 1)
fun turnleft move = mod4 (move - 1)

fun eqLoc loc1 loc2 =
  let (x1, y1) = loc1 in
  let (x2, y2) = loc2 in
    (x1 == x2) and (y1 == y2)
  end
  end

fun offset loc dir =
  let (x, y) = loc in
    if dir == up then (x, y - 1)
    else if dir == down then (x, y + 1)
    else if dir == left then (x - 1, y)
    else if dir == right then (x + 1, y)
    else (x, y)
  end

fun allNbrs loc =
  let (x, y) = loc in
    [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]
  end

fun delta a b =
  let (ax, ay) = a in
  let (bx, by) = b in
    if (bx == ax) and (by == ay + 1) then down
    else if (bx == ax) and (by == ay - 1) then up
    else if (bx == ax + 1) and (by == ay) then right
    else left
  end
  end

fun getcell maze loc =
  let (x, y) = loc in
    nth x (nth y maze)
  end

; Functions to assign a score to a location or direction

fun simpleScore fruitLoc fruitTime newLocation contents =
  let isFruit = (eqLoc newLocation fruitLoc) and (fruitTime > 0) in
  let score =
    if contents == wall then -1
    else if isFruit then 5
    else if contents == power then 4
    else if contents == pill then 3
    else 2 in
    score
  end
  end

fun cellScore ghostLocs ghostNextLocs fruitLoc fruitTime myVitality newLocation contents =
  let isGhost = any (map (fn loc => eqLoc newLocation loc) ghostLocs) in
  let isGhostNext = any (map (fn loc => eqLoc newLocation loc) ghostNextLocs) in
  let isFruit = (eqLoc newLocation fruitLoc) and (fruitTime > 0) in
  let score =
    if contents == wall then -1
    else if isGhost then
      if myVitality < 300 {fudge factor!} then -3 else 30
    else if isGhostNext then
      if myVitality < 300 {fudge factor!} then -2 else 20
    else if isFruit then 5
    else if contents == power then
      if myVitality > 0 then 0 else 4 ; don't take another power pill when already invincible
    else if contents == pill then 3
    else 2 in
    score
  end
  end
  end
  end

fun dirScore maze ghostLocs ghostNextLocs fruitLoc fruitTime myVitality myLocation oldMove dir =
  let newLocation = offset myLocation dir in
  let contents = getcell maze newLocation in
  let score = cellScore ghostLocs ghostNextLocs fruitLoc fruitTime myVitality newLocation contents in
  let score = if (score == 2) and (dir == opposite oldMove) then 1 else score in
    (score, dir)
  end
  end
  end
  end

; Functions for use in the Lambda-Man breadth-first search

fun inBounds width height loc =
  let (x, y) = loc in
    (x >= 0) and (x < width) and (y >= 0) and (y < height)
  end

fun getNbrs loc maze =
  let height = length maze in
  let width = length (head maze) in
    filter (fn x => (snd x) != wall) (map (fn loc => (loc, getcell maze loc)) (filter (fn loc => inBounds width height loc) (allNbrs loc)))
  end
  end

fun findGoodCells bfsResults =
  filter (fn x => ((snd (fst x)) == pill) or ((snd (fst x)) == power)) bfsResults

fun findBestCells goodCells =
  if null goodCells then []
  else
    let closestDist = minimum (map (fn x => (fst (snd x))) goodCells) in
      filter (fn x => (fst (snd x)) == closestDist) goodCells
    end

fun findDirs goodCell bfsResults myLoc =
  let p = rev (path goodCell bfsResults myLoc) in
  let deltas = deltafold delta p in
    deltas
  end
  end

fun path targetLocT bfsResults sourceLoc =
  if eqLoc (fst targetLocT) sourceLoc then [fst targetLocT]
  else
    let nPrevT = lookupBy (fn x y => eqLoc (fst x) (fst y)) targetLocT bfsResults in
      (fst targetLocT) :: (path (snd nPrevT) bfsResults sourceLoc)
    end

fun possibleNextLocs maze ghostStatus =
  let (ghostVitality, ghostLocation, ghostDirection) = ghostStatus in
    [offset ghostLocation ghostDirection,
     offset ghostLocation (turnright ghostDirection),
     offset ghostLocation (turnleft ghostDirection)]
  end

; Functions to search the maze (for fruit, but could be generalized)
fun findFruitRow row = findFruitRow' (enumerate row)
fun findFruitRow' nrow =
  if null nrow then -1 else if (snd (head nrow)) == fruit then fst (head nrow) else findFruitRow' (tail nrow)

fun findFruit maze = findFruit' maze (enumerate maze)
fun findFruit' nmaze =
  let x = findFruitRow (snd (head nmaze)) in
    if x >= 0 then (x, (fst (head nmaze))) else findFruit' (tail nmaze)
  end

; The step function
fun stepper state world =
  ; Unpack the parameters.
  let (maze, myStatus, ghostsStatus, fruitTime) = world in
  let (myVitality, myLocation, myDirection, lives, score) = myStatus in
  let (nMoves, oldMove, cachedMoves, movesSinceLike, fruitLoc, randsrc, randsrc_orig) = state in
  ; Reset the random number generator, if necessary.
  let randsrc = if null randsrc then randsrc_orig else randsrc in
  ; Determine the current location of each ghost, and the locations they may each move to next.
  let ghostLocs = map (fn ghostStatus => let (ghostVitality, ghostLocation, ghostDirection) = ghostStatus in ghostLocation end) ghostsStatus in
  let ghostNextLocs = concat (map (fn ghostStatus => possibleNextLocs maze ghostStatus) ghostsStatus) in
  ; Pick a desired move.
  let moveCachedMovesLike =
  ; Compute the score for each direction.
    let upScore = dirScore maze ghostLocs ghostNextLocs fruitLoc fruitTime myVitality myLocation oldMove up in
    let rightScore = dirScore maze ghostLocs ghostNextLocs fruitLoc fruitTime myVitality myLocation oldMove right in
    let downScore = dirScore maze ghostLocs ghostNextLocs fruitLoc fruitTime myVitality myLocation oldMove down in
    let leftScore = dirScore maze ghostLocs ghostNextLocs fruitLoc fruitTime myVitality myLocation oldMove left in
    let scores = [upScore, rightScore, downScore, leftScore] in ; can index into this list by direction
    trace scores in
    ; Pick a direction with maximum score.
    let maxscore = maximum (map (fn p => fst p) scores) in
    let bestdirs = map (fn p => snd p) (filter (fn s => (fst s) == maxscore) scores) in
    let randomdir = randomchoice randsrc bestdirs in
      if (maxscore <= 2) and (not (null cachedMoves)) then
        ; There is no direction we particularly like.  Follow the cached path, unless that would lead us astray (e.g. into the path of a ghost).
        if (fst (nth (head cachedMoves) scores)) <= 0 then
          (randomdir, [], false)
        else
          (head cachedMoves, tail cachedMoves, false)
      else if (maxscore <= 2) and (movesSinceLike > 5) then
        ; There is no direction we particularly like, and it's been a while (at least 5 moves) since we found anything.  There is no cached path, so compute one using a BFS of the maze.  Then follow that path, unless it would lead us astray (e.g. into the path of a ghost).
        let bfsResults = bfs (myLocation, getcell maze myLocation) (fn x => getNbrs (fst x) maze) (fn x y => eqLoc (fst x) (fst y)) (fn x => ((snd x) >= 10) or (let score = simpleScore fruitLoc fruitTime (fst (fst x)) (snd (fst x)) in score > 2 end)) in
        let bestCells = findBestCells (findGoodCells bfsResults) in
          if null bestCells then
            ; The BFS failed to find anything.  Fall back to the best direction previously found.
            (randomdir, [], false)
          else
            let optimalDirs = findDirs (fst (head bestCells)) bfsResults myLocation in
              if (fst (nth (head optimalDirs) scores)) <= 0 then
                (randomdir, [], false)
              else
                (head optimalDirs, tail optimalDirs, false)
            end
        end
        end
      else
        ; There is a direction that sounds appealing.  Use that in preference to any cached path.
        (randomdir, [], maxscore > 2)
    end
    end
    end
    end
    end
    end
    end
    end
    end in
  let (move, cachedMoves, like) = moveCachedMovesLike in
  let nMoves = nMoves + 1 in
  let movesSinceLike = if like then 0 else movesSinceLike + 1 in
  let state = (nMoves, move, cachedMoves, movesSinceLike, fruitLoc, tail randsrc, randsrc_orig) in
  trace (nMoves, move, cachedMoves, movesSinceLike) in
    (state, move)
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end

main world ghosts =
  let (maze, myStatus, ghostsStatus, fruitTime) = world in
  let randsrc = init_randsrc in
  let state = (0, down, [], 0, findFruit maze, randsrc, randsrc) in
    (state, stepper)
  end
  end
  end
