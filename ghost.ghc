int 1
mov c,a ; lambda-man x
mov d,b ; lambda-man y
; c is lambda x (lx)
; d is lambda y (ly)

int 3 ; get our index
int 5
; a is our x (gx)
; b is our y (gy)
; ============================

; compute abs(dx)
jgt AAA,a,c
; gx <= lx
mov e,c
sub e,a
mov pc,BBB
AAA:
; gx > lx
mov e,a
sub e,c
BBB:
; e contains abs(dx)
; ============================

; compute abs(dy)
jgt CCC,b,d
; gy <= ly
mov f,d
sub f,b
mov pc,DDD

CCC:
; gy > ly
mov f,b
sub f,d

DDD:
; f contains abs(dy)
; ============================



jgt EEE,e,f
; ============================
; abs(dx) <= abs(dy)
; go up or down

jgt FFF,b,d
; gy <= ly
; go down
mov e,2
mov pc,HHH

FFF:
; gy > ly
; go up
mov e,0
mov pc,HHH


EEE:
; ============================
; abs(dx) > abs(dy)
; go left or right

jgt GGG,a,c
; gx <= lx
; go right
mov e,1
mov pc,HHH

GGG:
; gx > gl
; go left
mov e,3
; fall-through


HHH:
; chosen direction is in e
; ===========================
; reverse direction in fright mode

int 3
int 5
; a is vitality
; b is direction

jeq GGG,a,1
mov pc,HHH

GGG: ; fright mode
add e,2
jlt HHH,e,4
; e > 4; subtract 4
sub e,4

HHH: ; not fright mode

; chosen (possibly reversed) direction is in e
; ===============================
mov a,e
int 0
hlt

; other ideas:
;  copy lambda-man's moves
