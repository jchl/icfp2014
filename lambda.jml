const up = 0
const right = 1
const down = 2
const left = 3

const standard = 0
const fright = 1
const invisible = 2

const wall = 0
const empty = 1
const pill = 2
const power = 3
const fruit = 4
const lambda_start = 5
const ghost_start = 6

fun mod4 move = if move > 3 then move - 4 else (if move < 0 then move + 4 else move)

fun opposite move = mod4 (move + 2)
fun turnright move = mod4 (move + 1)
fun turnleft move = mod4 (move - 1)

fun length xs = if null xs then 0 else 1 + length (tail xs)

fun nth n xs = if n == 0 then head xs else nth (n - 1) (tail xs)

fun getcell' map x y = nth x (nth y map)
fun getcell map loc =
  let (x, y) = loc in
    nth x (nth y map)
  end

fun offset loc dir =
  let (x, y) = loc in
    if dir == up then (x, y - 1) else
    (if dir == down then (x, y + 1) else
     (if dir == left then (x - 1, y) else
      (if dir == right then (x + 1, y) else (x, y))))
  end

fun stepper state world =
  let (map, myStatus, ghostsStatus, fruitTime) = world in
  let (myVitality, myLocation, myDirection, lives, score) = myStatus in
  let (myX, myY) = myLocation in
  trace (myLocation, getcell map myLocation) in
  let (oldMove, xx) = state in
  let move =
    if (getcell map (offset myLocation oldMove)) != wall then oldMove else
     (if (getcell map (offset myLocation (turnright oldMove))) != wall then (turnright oldMove) else
      (if (getcell map (offset myLocation (turnleft oldMove))) != wall then (turnleft oldMove) else
       opposite oldMove)) in
  let state = (move, xx) in
    (state, move)
  end
  end
  end
  end
  end
  end
  end

main world ghosts =
  let state = (down, []) in
    (state, stepper)
  end
